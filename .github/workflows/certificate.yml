name: Automate Implement Certificate from HV

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:

    workflow_call:
      # Map the workflow inputs to job
      inputs:
        hv-namespace:
          description: 'Namespace application'
          required: true
          type: string
        hv-certificate-path:
          description: 'Path Certificate stored in HV'
          required: true
          type: string
        az-resource-group-name:
          description: 'Resource group Azure'
          required: true
          type: string
        az-web-app-name:
          description: 'Resource group Azure'
          required: true
          type: string                              

jobs:
  vault:
    uses: ./.github/workflows/hashicorp-vault.yml
    secrets: inherit
    with:
      namespace: ${{ inputs.hv-namespace }}
      certificate-path-hv: ${{ inputs.hv-certificate-path }}

  azure:
    runs-on: ubuntu-latest
    needs: vault
    steps:
    - name: Decode base64 string to file
      run: |
        echo ${{ needs.vault.outputs.fileValue }}
        echo ${{ needs.vault.outputs.fileValue }} | base64 -d > domain.pfx
    - name: Use the decoded file
      run: cat domain.pfx

    - name: Command az login
      id: runps2
      shell: pwsh
      run: |
        az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_PASSWORD }} --tenant ${{ secrets.AZURE_TENANT_ID }}

    - name: Command az webapp config ssl upload
      id: runps3
      shell: pwsh
      run: |
        az webapp config ssl upload --resource-group ${{ inputs.az-resource-group-name }}  --name ${{ inputs.az-web-app-name }} --certificate-file ./domain.pfx --certificate-password ${{ needs.vault.outputs.password }}        

    - name: Command az webapp config ssl bind
      id: runps4
      shell: pwsh
      run: |
        az webapp config ssl bind --resource-group ${{ inputs.az-resource-group-name }} --name ${{ inputs.az-web-app-name }}  --certificate-thumbprint ${{ needs.vault.outputs.thumbprint }} --ssl-type SNI