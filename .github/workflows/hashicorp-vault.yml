name: Reusable Workflow

on:
  workflow_call:
    inputs:
      input1:
        description: 'VAULT NAMESPACE'
        required: true
        type: string
      input2:
        description: 'VAULT ADDR'
        required: true
        type: string
    outputs:
      output1:
        description: 'First filevalue parameter'
        value: ${{ steps.set-outputs.outputs.filevalue }}
      output2:
        description: 'Second password parameter'
        value: ${{ steps.set-outputs.outputs.password }}
      output3:
        description: 'Third thumbprint parameter'
        value: ${{ steps.set-outputs.outputs.thumbprint }}

jobs:
  reusable-job:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Perform some actions
      id: perform-actions
      run: |
        echo "Input 1: ${{ inputs.input1 }}"
        echo "Input 2: ${{ inputs.input2 }}"
        # Simulate some processing and set outputs
        role_id="6c45f644-408e-3e05-9d15-ec628ee6da08"
        secret_id="779da3ac-78a7-fdf7-3ae8-fa6dce8a7a77"        
        # Create the JSON payload
        payload=$(jq -n --arg role_id "$role_id" --arg secret_id "$secret_id" '{role_id: $role_id, secret_id: $secret_id}')
        
        # Make the API request to Vault
        response=$(curl -s --request POST --data "$payload" --header "X-Vault-Namespace: ${{ inputs.input1 }}" --header "Content-Type: application/json" "${{ inputs.input2 }}/v1/auth/approle/login")
        
        # Extract the client token from the response
        VAULT_TOKEN=$(echo $response | jq -r '.auth.client_token')
        
        # Make the API request to Vault
        response=$(curl -s --request GET --header "X-Vault-Token: $VAULT_TOKEN" "${{ inputs.input2 }}/v1/kv/data/internal-certificates/demosanddonnuts.online")
        
        # Extract the data from the response
        data=$(echo $response | jq -r '.data.data')
        
        # Output the data
        filevalue=$(echo $data | jq -r '.filevalue')
        password=$(echo $data | jq -r '.password')
        thumbprint=$(echo $data | jq -r '.thumbprint')

        echo "::set-output name=filevalue::$filevalue"
        echo "::set-output name=password::$password"
        echo "::set-output name=thumbprint::$thumbprint"        

    - name: Set outputs
      id: set-outputs
      run: |
        echo "::set-output name=filevalue::${{ steps.perform-actions.outputs.filevalue }}"
        echo "::set-output name=password::${{ steps.perform-actions.outputs.password }}"
        echo "::set-output name=thumbprint::${{ steps.perform-actions.outputs.thumbprint }}"
